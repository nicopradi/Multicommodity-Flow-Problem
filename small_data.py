         # ------------- METHODS TO GET THE DATA OF THE SMALL INSTANCE ------------- 
import openpyxl
import numpy as np

def getNodes(): 
    nStations = 20 # Number of nodes
    
    #NodeName - NodeID - NodeType - NodeCapacity
    nodes  = [['Verona'			,1	,3	,5000],
	    ['Brescia'			,2	,1	,3000],
	    ['Trento'			,3	,1	,3000],
	    ['Bolzano'			,4	,1	,3000],
	    ['Bologna'			,5	,1	,3000],
	    ['Vicenza'			,6	,1	,5000],
	    ['Rovigo'			,7	,1	,5000],
	    ['Padova'			,8	,3	,5000],
	    ['Castelfranco'		,9	,1	,1000],
	    ['Treviso'			,10	,1	,1000],
	    ['Venezia_Mestre'		,11	,1	,5000],
	    ['Venezia_Marghera'		,12	,1	,1000],
	    ['Portogruaro'		,13	,1	,3000],
	    ['Conegliano'		,14	,1	,1000],
	    ['Belluno'			,15	,1	,1000],
	    ['Pordenone'		,16	,2	,3000],
	    ['Udine'			,17	,1	,3000],
	    ['Monfalcone'		,18	,2	,3000],
	    ['Trieste'			,19	,1	,3000],
	    ['Tarvisio'			,20	,1	,3000] 	]
    
    return nStations, nodes

def getArcs():
    nArcs = 48 # Number of arcs
    
    #FromNode - ToNode - Length - Type (NodeId start at 1)
    arcs  = [[1	,2  ,65	,4], #A1
            [1  ,3  ,95 ,3], #A2
            [1  ,5  ,120,2], #A3
            [1  ,6  ,55 ,4], #A4
            [3  ,4  ,55 ,3], #A5
            [6  ,9  ,35 ,2], #A6
            [6  ,8  ,40 ,4], #A7
            [8  ,9  ,30 ,1], #A8
            [10 ,9  ,25 ,2], #A9
            [10 ,11 ,25 ,2], #A10
            [12 ,11 ,5  ,2], #A11
            [8  ,11 ,30 ,4], #A12
            [8  ,7  ,75 ,3], #A13
            [7  ,5  ,45 ,3], #A14
            [13 ,11 ,65 ,3], #A15
            [14 ,10 ,30 ,2], #A16
            [14 ,15 ,50 ,2], #A17
            [14 ,16 ,30 ,2], #A18
            [17 ,16 ,50 ,2], #A19
            [13 ,16 ,30 ,3], #A20
            [13 ,18 ,60 ,3], #A21
            [17 ,18 ,50 ,2], #A22
            [19 ,18 ,35 ,2], #A23
            [17 ,20 ,90 ,3], #A24
            [2  ,1  ,65 ,4], #A25       
            [3  ,1  ,95 ,3], #A26 
            [5  ,1  ,120,2], #A27
            [6  ,1  ,55 ,4], #A28
            [4  ,3  ,55 ,3], #A29
            [9  ,6  ,35 ,2], #A30
            [8  ,6  ,40 ,4], #A31
            [9  ,8  ,30 ,1], #A32
            [9  ,10 ,25 ,2], #A33
            [11 ,10 ,25 ,2], #A34
            [11 ,12 ,5  ,2], #A35
            [11 ,8  ,30 ,4], #A36            
            [7  ,8  ,75 ,3], #A37
            [5  ,7  ,45 ,3], #A38
            [11 ,13 ,65 ,3], #A39 
            [10 ,14 ,30 ,2], #A40
            [15 ,14 ,50 ,2], #A41
            [16 ,14 ,30 ,2], #A42
            [16 ,17 ,50 ,2], #A43
            [16 ,13 ,30 ,3], #A44
            [18 ,13 ,60 ,3], #A45
            [18 ,17 ,50 ,2], #A46
            [18 ,19 ,35 ,2], #A47
            [20 ,17 ,90 ,3] ] #A48
    
    return nArcs, arcs

    
def getCommodities():
    nCommodities = 202 # Number of commodities
    
    # From - To - Quantity (NodeId starts at 0) 
    commodities = [
	[14, 18, 5],  [14, 19, 6],  [14, 1, 11],  [14, 4, 18],  
	[4, 5, 65],  [4, 0, 145],  [4, 11, 40],  [4, 11, 54],  [4, 11, 12],  
	[4, 16, 31],  [4, 18, 48],  [4, 18, 5],  [4, 9, 40],  [4, 2, 28],  
	[4, 19, 50],  [4, 19, 52],  [4, 19, 35],  [4, 6, 21],  [4, 12, 30],  
	[4, 15, 36],  [4, 7, 96],  [4, 17, 25],  [4, 8, 31],  [4, 1, 43],  
	[4, 3, 10],  [4, 3, 12],  [4, 3, 25],  [4, 3, 66],  [4, 3, 80],  
	[4, 14, 13],  [3, 5, 40],  [3, 0, 128],  [3, 11, 106],  [3, 16, 25],  
	[3, 18, 18],  [3, 9, 20],  [3, 2, 26],  [3, 6, 6],  [3, 12, 20],  
	[3, 15, 18],  [3, 7, 118],  [3, 17, 10],  [3, 13, 10],  [3, 8, 10],  
	[3, 1, 85],  [3, 1, 25],  [3, 1, 55],  [3, 1, 25],  [3, 4, 20],  
	[3, 4, 24],  [3, 4, 101],  [1, 5, 36],  [1, 0, 80],  [1, 0, 62],  
	[1, 11, 111],  [1, 16, 41],  [1, 18, 15],  [1, 18, 55],  [1, 9, 25],  
	[1, 2, 20],  [1, 19, 160],  [1, 12, 25],  [1, 15, 16],  [1, 7, 24],  
	[1, 7, 44],  [1, 7, 59],  [1, 17, 21],  [1, 13, 26],  [1, 8, 21],  
	[1, 3, 25],  [1, 3, 44],  [1, 3, 6],  [1, 3, 68],  [1, 3, 20],  
	[1, 4, 36],  [1, 14, 50],  [8, 19, 38],  [8, 1, 21],  [8, 3, 13],  
	[8, 4, 46],  [13, 19, 70],  [13, 1, 28],  [13, 3, 10],  [13, 4, 15],  
	[17, 5, 10],  [17, 0, 15],  [17, 18, 16],  [17, 19, 25],  [17, 1, 55],  
	[17, 3, 36],  [17, 4, 33],  [7, 18, 45],  [7, 2, 6],  [7, 19, 60],  
	[7, 1, 130],  [7, 1, 22],  [7, 1, 15],  [7, 3, 26],  [7, 3, 24],  
	[7, 3, 40],  [7, 3, 15],  [7, 4, 105],  [15, 18, 31],  [15, 19, 51],  
	[15, 1, 36],  [15, 3, 41],  [15, 4, 30],  [15, 4, 25],  [12, 0, 6],  
	[12, 18, 15],  [12, 19, 33],  [12, 1, 33],  [12, 3, 16],  [12, 4, 30],  
	[6, 18, 11],  [6, 19, 23],  [6, 1, 43],  [6, 3, 21],  [6, 4, 58],  
	[19, 5, 51],  [19, 0, 12],  [19, 0, 60],  [19, 11, 78],  [19, 16, 53],  
	[19, 9, 31],  [19, 6, 10],  [19, 12, 15],  [19, 15, 46],  [19, 7, 73],  
	[19, 17, 30],  [19, 13, 26],  [19, 8, 21],  [19, 1, 40],  [19, 1, 50],  
	[19, 1, 18],  [19, 4, 60],  [19, 4, 50],  [19, 14, 8],  [2, 11, 5],  
	[2, 18, 10],  [2, 1, 25],  [2, 3, 21],  [2, 4, 15],  [9, 0, 11],  
	[9, 18, 16],  [9, 19, 30],  [9, 1, 55],  [9, 3, 26],  [9, 4, 43],  
	[18, 5, 50],  [18, 0, 35],  [18, 11, 21],  [18, 16, 26],  [18, 9, 10],  
	[18, 2, 6],  [18, 6, 5],  [18, 12, 6],  [18, 15, 10],  [18, 7, 46],  
	[18, 17, 8],  [18, 1, 13],  [18, 1, 45],  [18, 3, 20],  [18, 4, 43],  
	[18, 14, 8],  [16, 5, 5],  [16, 0, 13],  [16, 18, 28],  [16, 19, 56],  
	[16, 1, 63],  [16, 3, 18],  [16, 4, 45],  [16, 4, 33],  [11, 0, 8],  
	[11, 18, 43],  [11, 2, 11],  [11, 19, 51],  [11, 1, 20],  [11, 1, 55],  
	[11, 1, 15],  [11, 1, 52],  [11, 3, 81],  [11, 4, 30],  [11, 4, 70],  
	[0, 11, 20],  [0, 16, 13],  [0, 18, 40],  [0, 19, 83],  [0, 17, 30],  
	[0, 1, 20],  [0, 1, 65],  [0, 1, 70],  [0, 3, 45],  [0, 3, 80],  
	[0, 4, 123],  [5, 16, 10],  [5, 18, 43],  [5, 19, 46],  [5, 17, 13],  
	[5, 1, 98],  [5, 3, 70],  [5, 4, 73] 
        ]
    
    return nCommodities, commodities

# Return an adjency matrix, each entry is of the form (x,y)
# x : arc cost between the two corresponding node, or 0 if there is no arc between the two nodes
# y : the corresponding arc_id (this entry will be filled later on)

def getCosts(nStations): 
    cost = np.zeros((nStations, nStations, 2), dtype=int) 

    nArcs, arcs = getArcs()
    # Fill the cost variable by reading the arcs costs and indices
    for i in range(nArcs):
        cost[arcs[i][0] - 1, arcs[i][1] - 1] = [arcs[i][2], i]
    return cost

